{"ast":null,"code":"import sha256 from 'crypto-js/sha256';\n\nclass Block {\n  constructor(index, timestamp, data, previousHash = '') {\n    this.index = index;\n    this.timestamp = timestamp;\n    this.data = data;\n    this.previousHash = previousHash;\n    this.hash = this.CalculateHash();\n    this.nonce = 0;\n    this.mining == true;\n  }\n\n  CalculateHash() {\n    return sha256(this.index + this.timestamp + this.previousHash + this.nonce + JSON.stringify(this.data)).toString();\n  }\n\n  Mine(difficulty) {\n    while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(\"0\")) {\n      this.nonce++;\n      this.hash = this.CalculateHash();\n    }\n\n    mining == false;\n  }\n\n}\n\nexport default Block;","map":{"version":3,"sources":["C:/Users/Gerald.Anene/React/BlockChain-React/blockchain/src/Block.js"],"names":["sha256","Block","constructor","index","timestamp","data","previousHash","hash","CalculateHash","nonce","mining","JSON","stringify","toString","Mine","difficulty","substring","Array","join"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;;AAEA,MAAMC,KAAN,CAAW;AAEVC,EAAAA,WAAW,CAACC,KAAD,EAAOC,SAAP,EAAiBC,IAAjB,EAAsBC,YAAY,GAAC,EAAnC,EAAsC;AAC5C,SAAKH,KAAL,GAAWA,KAAX;AACA,SAAKC,SAAL,GAAeA,SAAf;AACA,SAAKC,IAAL,GAAUA,IAAV;AACA,SAAKC,YAAL,GAAkBA,YAAlB;AACA,SAAKC,IAAL,GAAU,KAAKC,aAAL,EAAV;AACA,SAAKC,KAAL,GAAW,CAAX;AACA,SAAKC,MAAL,IAAa,IAAb;AACJ;;AAEDF,EAAAA,aAAa,GAAE;AACd,WAAOR,MAAM,CAAC,KAAKG,KAAL,GAAW,KAAKC,SAAhB,GAA0B,KAAKE,YAA/B,GAA4C,KAAKG,KAAjD,GAAuDE,IAAI,CAACC,SAAL,CAAe,KAAKP,IAApB,CAAxD,CAAN,CAAyFQ,QAAzF,EAAP;AACA;;AAEDC,EAAAA,IAAI,CAACC,UAAD,EAAY;AACf,WAAM,KAAKR,IAAL,CAAUS,SAAV,CAAoB,CAApB,EAAsBD,UAAtB,MAAoCE,KAAK,CAACF,UAAU,GAAC,CAAZ,CAAL,CAAoBG,IAApB,CAAyB,GAAzB,CAA1C,EAAwE;AAC9D,WAAKT,KAAL;AACA,WAAKF,IAAL,GAAU,KAAKC,aAAL,EAAV;AACT;;AACDE,IAAAA,MAAM,IAAE,KAAR;AACA;;AAtBS;;AAyBX,eAAeT,KAAf","sourcesContent":["import sha256 from 'crypto-js/sha256';\r\n\r\nclass Block{\r\n\r\n\tconstructor(index,timestamp,data,previousHash=''){\r\n      this.index=index;\r\n      this.timestamp=timestamp;\r\n      this.data=data;\r\n      this.previousHash=previousHash;\r\n      this.hash=this.CalculateHash();\r\n      this.nonce=0;\r\n      this.mining==true;\r\n\t}\r\n\r\n\tCalculateHash(){\r\n\t\treturn sha256(this.index+this.timestamp+this.previousHash+this.nonce+JSON.stringify(this.data)).toString();\r\n\t}\r\n\r\n\tMine(difficulty){\r\n\t\twhile(this.hash.substring(0,difficulty)!==Array(difficulty+1).join(\"0\")){\r\n            this.nonce++;\r\n            this.hash=this.CalculateHash();\r\n\t\t}\r\n\t\tmining==false;\r\n\t}\r\n}\r\n\r\nexport default Block;"]},"metadata":{},"sourceType":"module"}